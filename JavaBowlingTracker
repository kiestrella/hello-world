Bowling Class
import javax.swing.JOptionPane;

public class Bowling {

    public static void main(String[] args) {
 
        final int MAX_VALUE = 10;
        int firstRoll = 0;
        int secondRoll = 0;
        int thirdRoll = 0;
        boolean thisFrameSpare = false;
        boolean thisFrameStrike = false;
        boolean prevFrameSpare = false;
        boolean prevFrameStrike = false;
        boolean prevTwoFramesStrike = false;
        int score = 0;
        String keyboardInput;

        
        Roll roll = new Roll(MAX_VALUE);
        
        String player1 = JOptionPane.showInputDialog(" Enter your player's name: ");
		
		System.out.println("WELCOME " + player1);

        //for loop for frames
        for (int i = 0; i < 10; i++) {
            firstRoll = 0;
            secondRoll = 0;
            thisFrameSpare = false;
            thisFrameStrike = false;
            
            //first roll frame
            System.out.println("Frame: " + (i + 1) + " Roll: 1");
            roll.setOffsetValue(0);
            roll.executeRoll();
            firstRoll = roll.getRoll();

            //to determine if second roll is needed
            if (firstRoll != 10 || (firstRoll == 10 && i == 9)) {
                if (firstRoll == 10 && i == 9) {
                    thisFrameStrike = true;
                }
                
                //second roll frame
                if (i == 9) {
                    roll.setOffsetValue(0);
                } else {
                    roll.setOffsetValue(firstRoll);
                }
                System.out.println("Frame: " + (i + 1) + " Roll: 2");
                roll.executeRoll();
                secondRoll = roll.getRoll();
                if (firstRoll + secondRoll == 10 && !thisFrameStrike) {
                    thisFrameSpare = true;
                }
            } else {
                if (i == 9) {
                    thisFrameStrike = false;
                } else {
                    thisFrameStrike = true;
                    secondRoll = 0;
                }
            }
          
            //score calculation
            if (prevTwoFramesStrike) {
                if (thisFrameStrike) {
                    score += 30;
                    score = score + secondRoll + 20;
                } else if (thisFrameSpare) {
                    score += 20;
                } else {
                    score = score + firstRoll + 20;
                    score = score + firstRoll + secondRoll + 10;
                    score = score + firstRoll + secondRoll;
                }
            } else if (prevFrameStrike) {
                if (thisFrameSpare) {
                    score += 20;
                } else if (!thisFrameStrike) {
                    score = score + firstRoll + 10;
                    score = score + firstRoll + secondRoll;
                }
            } else if (prevFrameSpare) {
                if (thisFrameStrike) {
                    score += 20;
                } else if (thisFrameSpare) {
                    score = score + firstRoll + 10;
                } else {
                    score = score + firstRoll + 10;
                    score = score + firstRoll + secondRoll;
                }
            } else {
                if (!thisFrameStrike && !thisFrameSpare) {
                    score = score + firstRoll + secondRoll;
                }
            }
            
            //strikes
            if (i != 9) {
                if (thisFrameStrike) {
                    if (prevFrameStrike == true) {
                        prevTwoFramesStrike = true;
                    } else {
                        prevTwoFramesStrike = false;
                    }
                    prevFrameStrike = true;
                } else {
                    prevFrameStrike = false;
                    prevTwoFramesStrike = false;
                }
            }
            
            //spares
            if (i != 9) {
                if (thisFrameSpare) {
                    prevFrameSpare = true;
                } else {
                    prevFrameSpare = false;
                }
            }
            System.out.println("Score: " + score);
        }
        
        
        if (thisFrameStrike || thisFrameSpare) {
            
            if (secondRoll == 10 || thisFrameSpare) { //third roll for tenth frame
                roll.setOffsetValue(0);
            } else {
                roll.setOffsetValue(secondRoll);
            }
            System.out.println("Frame: 10 Roll: 3");
            roll.executeRoll();
            thirdRoll = roll.getRoll();
            
            score = score + firstRoll + secondRoll + thirdRoll; //score total for tenth frame
        }
       
        System.out.println("The final score is: " + score); //final score
    }
    
}
Roll Class
import java.util.Scanner;

public class Roll {
   
    private final int maxValue;
    private int offsetValue;
    private int roll;
    private final Scanner keyboard = new Scanner(System.in);
    
    //max value for rolls
    public Roll(int maxValue) {
        this.maxValue = maxValue;
    }
    
    //to determine range for next roll
    public void setOffsetValue(int offsetValue) {
        this.offsetValue = offsetValue;
    }
    
    
    public void executeRoll() {
        String keyboardInput;
        boolean validRoll = false;
        int testRoll = 0;
        System.out.println("Enter value for next roll.  Must be between 0 and " +
                (maxValue - offsetValue) + ".");
        keyboardInput = keyboard.nextLine();
        
        do {
            try {
                testRoll = Integer.parseInt(keyboardInput);
                if (testRoll >= (0) && testRoll <= (maxValue - offsetValue)) {
                    validRoll = true;
                } else {
                    System.out.println("Invalid entry.  Enter value for next roll.  " + 
                        "Must be between 0 and " + (maxValue - offsetValue) + ".");
                    keyboardInput = keyboard.nextLine();
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid entry.  Enter value for next roll.  " + 
                        "Must be between 0 and " + (maxValue - offsetValue) + ".");
                keyboardInput = keyboard.nextLine();
            }
        } while (!validRoll);

        setRoll(testRoll);
        
    }
    
    //to set value for roll
    private void setRoll(int roll) {
        this.roll = roll;
    }
    
    //value of the roll
    public int getRoll() {
        return roll;
    }
    
}
